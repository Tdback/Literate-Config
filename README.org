#+TITLE:Tdback's Literate Configuration

Welcome home!

This project uses a method of programming known as literate programming, where the programmer combines both the documentation and code for their program into a single file with markdown-like syntax (in this case, org-mode in Emacs). This method enables me to seamlessly blend code and documentation, from which I automate the process of tangling (or extracting) the program's code into its respective configuration scripts. This approach proves quite intuitive when performing configuration changes in my system or text editor. 

Here's my configuration: 

In opposition to standard desktop environments such as GNOME or KDE, I instead use a minimal window manager called bspwm, which allows me to take full advantage of a keyboard-centric workflow when programming, writing, or performing other day-to-day tasks on my desktop. sxhkd, a simple X11 hotkey daemon, allows me to set custom keybindings for manipulating bspwm windows and navigating my desktop efficiently. Polybar, a fast and easy-to-use status bar, also provides an additional means of window navigation. I also make heavy use of Rofi, a window switcher and application launcher.

I rely heavily on Emacs for my daily work, and it's safe to say that I use it for nearly everything (outside of web browsing and video games). There's a running joke that "Emacs is the best operating system!" because of its versatility and extensive features, and I couldn't agree more. I have invested a significant amount of time into refining my Emacs configuration. Phenomenal tools such as dired for file management, magit for version control, vterm for terminal emulation, and eglot for language server support all enhance my productivity as a programmer and power user. Additionally, I make use of several wonderful tools like the beloved org-mode for note-taking and writing, and jinx for spellchecking. Oftentimes, I even find myself considering Emacs as my [[https://www.orgroam.com][second brain]]. Oh, and of course I use evil-mode for vim keybindings and macros :-)

Although I use Arch Linux, this configuration is completely distro-agnostic, given the specified distribution in question contains all the relevant packages. I prefer to use Arch Linux for its package manager, pacman, and its overall simple and lightweight design. I am by no means suggesting you must do the same. 

* Installation 

To set up the configuration files, simply execute the following in your terminal:

(Ensure you have both Lua and Emacs installed on your system first!)

#+begin_src bash 

  $ git clone https://github.com/Tdback/Literate-Config/

  $ mkdir -p ~/.dotfiles/ \
    && mv Literate-Config/* ~/.dotfiles/ \
    && rmdir Literate-Config/

  $ cd ~/.dotfiles/build_scripts/ && chmod +x tangle.lua

  $ ./tangle.lua

#+end_src

NOTE: /Some of these files are still being documented. As a result, documentation throughout may be incomplete or lack clarity./

* What is literate programming?

Literate programming was originally conceived by Donald Knuth, in an effort to achieve significantly better documentation for programs. Knuth created the *WEB* system, which would both /weave/ and /tangle/ a literate programming document, which was composed of both text and blocks of code, producing (for example) both a LaTeX document and Pascal program. If you would like to read additional information regarding the origin of literate programming, the original paper can be found [[http://www.literateprogramming.com/knuthweb.pdf][here]].

* Gallery

[[./images/desktop-00.png]]

[[./images/desktop-01.png]]

[[./images/desktop-02.png]]

[[./images/desktop-03.png]]
